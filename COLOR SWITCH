/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javaapplication17;

import javafx.animation.AnimationTimer;
import javafx.animation.PathTransition;
import javafx.application.Application;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.*;
import javafx.scene.transform.Rotate;
import javafx.stage.Stage;
import javafx.util.Duration;

/**
 *
 * @author saga
 */
public class JavaApplication17 extends Application {
     		
   private Pane root;
   private Ball ballb;          //ball
  
   private AnimationTimer timer;
   private int ballJump=150;
   private obstacle1 ob1;       //obstacle
   
   
   private Parent createContent()
   {
         root=new Pane();
         root.setPrefSize(700,700);
         root.setStyle("-fx-background-color: black");
         ballb = new Ball();
        ob1=new obstacle1();
         
         
         root.getChildren().add(ballb.getCircle());
         ob1.addObstacle(root);
       
         timer = new AnimationTimer() 
        {
            @Override
            public void handle(long now)
            {
               
                ob1.roll();
            }
        };
         timer.start();
         return root;
     }
   
 
    
    
   @Override
    public void start(Stage stage) throws Exception 
    {
    
        stage.setScene(new Scene(createContent()));
        stage.setTitle("COLOR SWITCH");
        Rectangle pathe=new Rectangle(ballb.getX(),ballb.getY()-ballJump,0.5,ballJump);
       
        PathTransition ballM=new PathTransition();
        ballM.setNode(ballb.getCircle());
        ballM.setDuration(Duration.seconds(1.4));
        ballM.setPath(pathe);
        ballM.setCycleCount(PathTransition.INDEFINITE);
        stage.getScene().setOnKeyPressed(event -> {
            switch (event.getCode()) {
                case W:
                 pathe.setTranslateY(pathe.getY()-ballJump);
                 
                     ballM.setPath(pathe);
                     ballM.playFromStart();
                    break;
                default:
                    ballb.getCircle().setTranslateY(600);
                    break;
        }
        });
        
        stage.getScene().setOnKeyReleased(event ->
        {
            pathe.setTranslateY(-ballJump);
                     ballM.setPath(pathe);
                     ballM.playFromStart();
        });
        
      
       ballM.play();
       stage.show();

 }
    

        
    public static void main(String[] args) 
    {
        launch(args); 
    }
}

class Ball extends Application
{
    private Circle c;
    //centre coordinates
    private int x;
    private int y;
    private char color;
    
   Ball()
   {
         c=new Circle(400,600, 13,Color.GREEN);
         x=400;
         y=700;
         color = 'g';
   }

    public Circle getCircle() 
    {
        return c;
    }

    public int getX()
    {
        return x;
    }

    public void setColor(char color)
    {
        this.color = color;
        switch (color) {
            case 'r':
                this.getCircle().setFill(Color.RED);
                break;
            case 'b':
                this.getCircle().setFill(Color.BLUE);
                break;
            case 'g':
                this.getCircle().setFill(Color.GREEN);
                break;
            default:
                this.getCircle().setFill(Color.YELLOW);
                break;
        }
    }

    public int getY()
    {
        return y;
    }

    public void incrementY(int increment) 
    {
        this.getCircle().setTranslateY(this.getCircle().getTranslateY()+ increment);
    }

    public void setY()
    {
        this.getCircle().setTranslateY(600);
    }
    public char getColor() 
    {
        return color;
    }

    @Override
    public void start(Stage stage) throws Exception 
    {
        throw new UnsupportedOperationException("Not supported yet."); 
    }
}


interface Obstacles {               //interface
  
  public void rotate();
   public void colorDist();
   public void colorWidth();
   public void RotateSpeed(int i);
   
 }


class obstacle1 extends Application implements Obstacles
{
@Override
    public void start(Stage stage) throws Exception 
    {
        throw new UnsupportedOperationException("Not supported yet."); 
    }
    
    private Arc arch,arch2,arch3,arch4;
   private Rotate r;
    private AnimationTimer timer;
    private int speed;
    
    obstacle1(){
         arch= new Arc(400, 300, 100, 100,90,90);
          arch.setStrokeWidth(15);
         arch.setStroke(Color.BLUE);
      arch2=new Arc(400,300,100, 100,90,-90)  ;
       arch2.setStrokeWidth(15);
         arch2.setStroke(Color.GREEN);
      arch3=new Arc(400,300,100, 100,-90,90)  ;
       arch3.setStrokeWidth(15);
         arch3.setStroke(Color.YELLOW);
      arch4=new Arc(400,300,100, 100,-90,-90)  ;
       arch4.setStrokeWidth(15);
         arch4.setStroke(Color.RED);
         RotateSpeed(1);
         rotate();
    }
    
    public void addObstacle(Pane root){
       root.getChildren().add(arch);
       root.getChildren().add(arch2); 
        root.getChildren().add(arch3);
        root.getChildren().add(arch4);
    }
   
    public void rotate(){
        r=new Rotate();
        r.setPivotX(400);
        r.setPivotY(300);
        arch.getTransforms().addAll(r);
        arch2.getTransforms().addAll(r);
        arch3.getTransforms().addAll(r);
        arch4.getTransforms().addAll(r);
        
    }
    
    public void RotateSpeed(int i){
        this.speed+=i;
    }
   
    public void roll(){
        r.setAngle(r.getAngle()+this.speed);
    }
    
    public void colorWidth(){
        System.out.println(1);
    }
    public void colorDist(){
        System.out.println(1);
    }
     
}
